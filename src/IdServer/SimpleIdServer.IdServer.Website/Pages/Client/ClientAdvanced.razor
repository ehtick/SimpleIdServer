@using Microsoft.AspNetCore.Html;
@using SimpleIdServer.IdServer.Api.Token.Handlers;
@using SimpleIdServer.IdServer.Config
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ClientStore;
@using SimpleIdServer.IdServer.Website.Stores.IdServerConfigurationStore;
@using SimpleIdServer.IdServer.Website.Stores.ScopeStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@using SimpleIdServer.IdServer.WsFederation
@using SimpleIdServer.IdServer.WsFederation.Extensions;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher dispatcher
@inject IState<UpdateClientState> updateClientState
@inject TooltipService tooltipService
@inject NotificationService notificationService

<RadzenTemplateForm Submit=@SubmitUpdateClient TItem="UpdateAdvancedClient" Data=@updateAdvancedClient>
    <RadzenAccordion Multiple=true>    
        <Items>
            <RadzenAccordionItem Text="OpenID configuration" Selected=true>
                <!-- TokenSignedResponseAlg -->
                <div class="row">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.TokenSignatureAlgTooltip))" />
                        <RadzenLabel Text="@Global.TokenSignatureAlg" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenDropDown Name="TokenSignedResponseAlg" Class="w-100"
                        Data=@DefaultTokenSecurityAlgs.AllSigAlgs
                        TValue="string"
                        @bind-Value=@updateAdvancedClient.TokenSignedResponseAlg />
                    </div>
                </div>
                <!-- IdTokenSignedResponseAlg -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.IdTokenSignatureAlgTooltip))" />
                        <RadzenLabel Text="@Global.IdTokenSignatureAlg" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenDropDown Name="IdTokenSignedResponseAlg" Class="w-100"
                        Data=@DefaultTokenSecurityAlgs.AllSigAlgs
                        TValue="string"
                        @bind-Value=@updateAdvancedClient.IdTokenSignedResponseAlg />
                    </div>
                </div>
                <!-- AuthorizationSignedResponseAlg -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.AuthorizationResponseSignatureAlgTooltip))" />
                        <RadzenLabel Text="@Global.AuthorizationResponseSignatureAlg" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenDropDown Name="AuthorizationSignedResponseAlg" Class="w-100"
                        Data=@DefaultTokenSecurityAlgs.AllSigAlgs
                        TValue="string"
                        @bind-Value=@updateAdvancedClient.AuthorizationSignedResponseAlg />
                    </div>
                </div>
                <!-- AuthorizationDataTypes -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.AuthorizationDataTypesTooltip))" />
                        <RadzenLabel Text="@Global.AuthorizationDataTypes" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenTextBox Name="AuthorizationDataTypes" Class="w-100" @bind-Value=@updateAdvancedClient.AuthorizationDataTypes></RadzenTextBox>
                        <p class="text-muted">@((MarkupString)(Global.AuthorizationDataTypesDescription))</p>
                    </div>
                </div>
                <!-- Response types -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.ResponseTypesTooltip))" />
                        <RadzenLabel Text="@Global.ResponseTypes" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenDropDown @bind-Value=@selectedResponseTypes Chips=true Data=@responseTypes Multiple=true AllowClear=true Placeholder="@Global.SelectResponseTypes" class="w-100"></RadzenDropDown>
                    </div>
                </div>
                <!-- Device code expiration time -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.DeviceCodeExpirationTimeTooltip))" />
                        <RadzenLabel Text="@Global.DeviceCodeExpirationTime" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric Name="DeviceCodeExpirationInSeconds" Class="w-100" @bind-Value=@updateAdvancedClient.DeviceCodeExpirationInSeconds></RadzenNumeric>
                    </div>
                </div>
                <!-- Device code polling interval -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.DeviceCodePollingIntervalTooltip))" />
                        <RadzenLabel Text="@Global.DeviceCodePollingInterval" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric Name="DeviceCodePollingInterval" Class="w-100" @bind-Value=@updateAdvancedClient.DeviceCodePollingInterval></RadzenNumeric>
                    </div>
                </div>
                <!-- Pushed authorization request expiration time -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.ParExpirationTimeTooltip))" />
                        <RadzenLabel Text="@Global.ParExpirationTime" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric Name="PARExpirationTimeInSeconds" Class="w-100" @bind-Value=@updateAdvancedClient.PARExpirationTimeInSeconds></RadzenNumeric>
                    </div>
                </div>
                <!-- Authorization code expiration time -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.AuthCodeExpirationTimeTooltip))" />
                        <RadzenLabel Text="@Global.AuthCodeExpirationTime" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric Name="AuthorizationCodeExpirationInSeconds" Class="w-100" @bind-Value=@updateAdvancedClient.AuthorizationCodeExpirationInSeconds></RadzenNumeric>
                    </div>
                </div>
                <!-- Token expiration time -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.TokenExpirationTimeTooltip))" />
                        <RadzenLabel Text="@Global.TokenExpirationTime" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric Name="TokenExpirationTimeInSeconds" Class="w-100" @bind-Value=@updateAdvancedClient.TokenExpirationTimeInSeconds></RadzenNumeric>
                    </div>
                </div>
                <!-- Refresh token expiration time -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.RefreshTokenExpirationTimeTooltip))" />
                        <RadzenLabel Text="@Global.RefreshTokenExpirationTime" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric Name="RefreshTokenExpirationTimeInSeconds" Class="w-100" @bind-Value=@updateAdvancedClient.RefreshTokenExpirationTimeInSeconds></RadzenNumeric>
                    </div>
                </div>
                <!-- Refresh token usage type -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.RefreshTokenUsageTypeTooltip))" />
                        <RadzenLabel Text="@Global.RefreshTokenUsageType" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenDropDown class="fullWidth" @bind-Value="@updateAdvancedClient.RefreshTokenUsage"
                        Name="RefreshTokenUsageType"
                        Data="@refreshTokenUsageRecords"
                        TextProperty="DisplayName"
                        ValueProperty="Type" />
                    </div>
                </div>
                <!-- Cookie expiration time -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.CookieExpirationTimeTooltip))" />
                        <RadzenLabel Text="@Global.CookieExpirationTime" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric Name="UserCookieExpirationTimeInSeconds" Class="w-100" @bind-Value=@updateAdvancedClient.UserCookieExpirationTimeInSeconds></RadzenNumeric>
                    </div>
                </div>
                <!-- Max authorization request lifetime -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.MaxRequestParameterLifetimeSecondsTooltip))" />
                        <RadzenLabel Text="@Global.MaxRequestParameterLifetimeSeconds" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric @bind-Value=@updateAdvancedClient.MaxRequestParameterLifetimeSeconds Class="w-100" />
                    </div>
                </div>
                <!-- DPoP -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.IsDpopRequiredTooltip))" />
                        <RadzenLabel Text="@Global.IsDpopRequired" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenCheckBox @bind-Value="@updateAdvancedClient.IsDPoPRequired" />
                    </div>
                </div>
                <!-- DPoP Nonce -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.IsDpopNonceRequiredTooltip))" />
                        <RadzenLabel Text="@Global.IsDpopNonceRequired" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenCheckBox @bind-Value="@updateAdvancedClient.IsDPoPNonceRequired" />
                    </div>
                </div>
                <!-- DPoP Nonce lifetime in seconds -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.DpopNonceLifetimeTooltip))" />
                        <RadzenLabel Text="@Global.DpopNonceLifetime" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric @bind-Value=@updateAdvancedClient.DPOPNonceLifetimeInSeconds Class="w-100" />
                    </div>
                </div>
                <!-- DPoP lifetime in seconds -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.DpopLifetimeTooltip))" />
                        <RadzenLabel Text="@Global.DpopLifetime" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric @bind-Value=@updateAdvancedClient.DpopLifetimeSeconds Class="w-100" />
                    </div>
                </div>
                <!-- Max binding message size -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, Global.MaxBindingMessageSizeTooltip))" />
                        <RadzenLabel Text="@Global.MaxBindingMessageSize" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenNumeric @bind-Value=@updateAdvancedClient.MaxBindingMessageSize Class="w-100" />
                    </div>
                </div>
            </RadzenAccordionItem>
        </Items>
    </RadzenAccordion>

    <SidAuthorizeView Roles=@("/clients/manage")>
        <Authorized>
            <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateClientState.Value.IsUpdating ? Global.Updating : Global.Update)" Disabled=@updateClientState.Value.IsUpdating />
        </Authorized>
    </SidAuthorizeView>
</RadzenTemplateForm>

@code {
    [Parameter]
    public SimpleIdServer.IdServer.Domains.Client Client { get; set; }

    IEnumerable<string> selectedResponseTypes { get; set; } = new List<string>();
    IEnumerable<string> responseTypes { get; set; } = new List<string>();
    IEnumerable<RefreshTokenUsageRecord> refreshTokenUsageRecords = new List<RefreshTokenUsageRecord>
    {
        new RefreshTokenUsageRecord { Type = RefreshTokenUsages.OneTimeOnly, DisplayName = Global.RefreshTokenUsageOneTime },
        new RefreshTokenUsageRecord { Type = RefreshTokenUsages.ReUse, DisplayName = Global.RefreshTokenUsageReusable }
    };

    record UpdateAdvancedClient
    {
        public string? TokenSignedResponseAlg { get; set; } = null;
        public string? IdTokenSignedResponseAlg { get; set; } = null;
        public string? AuthorizationSignedResponseAlg { get; set; } = null;
        public double RefreshTokenExpirationTimeInSeconds { get; set; } = 60 * 30;
        public string? AuthorizationDataTypes { get; set; } = null;
        public bool IsDPoPRequired { get; set; } = false;
        public bool IsDPoPNonceRequired { get; set; } = false;
        public double DPOPNonceLifetimeInSeconds { get; set; }
        public double UserCookieExpirationTimeInSeconds { get; set; } = 60 * 30;
        public double TokenExpirationTimeInSeconds { get; set; } = 60 * 30;
        public int AuthorizationCodeExpirationInSeconds { get; set; } = 600;
        public int DeviceCodeExpirationInSeconds { get; set; } = 600;
        public int DeviceCodePollingInterval { get; set; } = 5;
        public int PARExpirationTimeInSeconds { get; set; } = 600;
        public int DpopLifetimeSeconds { get; set; } = 300;
        public int MaxBindingMessageSize { get; set; } = 150;
        public int MaxRequestParameterLifetimeSeconds { get; set; } = 300;
        public RefreshTokenUsages RefreshTokenUsage { get; set; } = RefreshTokenUsages.OneTimeOnly;
    }

    record RefreshTokenUsageRecord
    {
        public RefreshTokenUsages Type { get; set; }
        public string DisplayName { get; set; }
    }

    UpdateAdvancedClient updateAdvancedClient = new UpdateAdvancedClient();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<GetOpenIdServerConfigurationSuccessAction>((act) =>
            {
                responseTypes = act.Configuration.ResponseTypesSupported.OrderBy(a => a).ToList();
                StateHasChanged();
            });
            SubscribeToAction<UpdateAdvancedClientSettingsSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.ClientAdvancedSettingsUpdated });
                StateHasChanged();
            });
            SubscribeToAction<UpdateAdvancedClientSettingsFailureAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = act.ErrorMessage });
                StateHasChanged();
            });
            dispatcher.Dispatch(new GetOpenIdServerConfigurationAction());
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this.Client == null) return;
        updateAdvancedClient = new UpdateAdvancedClient
        {
            TokenSignedResponseAlg = Client.TokenSignedResponseAlg,
            IdTokenSignedResponseAlg = Client.IdTokenSignedResponseAlg,
            AuthorizationSignedResponseAlg = Client.AuthorizationSignedResponseAlg,
            AuthorizationDataTypes = Client.AuthorizationDataTypes == null || !Client.AuthorizationDataTypes.Any() ? string.Empty : string.Join(";", Client.AuthorizationDataTypes),
            IsDPoPRequired = Client.DPOPBoundAccessTokens,
            IsDPoPNonceRequired = Client.IsDPOPNonceRequired,
            DPOPNonceLifetimeInSeconds = Client.DPOPNonceLifetimeInSeconds
        };
        if (Client.TokenExpirationTimeInSeconds != null)
        {
            updateAdvancedClient.TokenExpirationTimeInSeconds = Client.TokenExpirationTimeInSeconds.Value;
        }

        if(Client.RefreshTokenExpirationTimeInSeconds != null)
        {
            updateAdvancedClient.RefreshTokenExpirationTimeInSeconds = Client.RefreshTokenExpirationTimeInSeconds.Value;
        }

        if (Client.UserCookieExpirationTimeInSeconds != null)
        {
            updateAdvancedClient.UserCookieExpirationTimeInSeconds = Client.UserCookieExpirationTimeInSeconds.Value;
        }

        updateAdvancedClient.AuthorizationCodeExpirationInSeconds = Client.AuthorizationCodeExpirationInSeconds;
        updateAdvancedClient.DeviceCodeExpirationInSeconds = Client.DeviceCodeExpirationInSeconds;
        updateAdvancedClient.DeviceCodePollingInterval = Client.DeviceCodePollingInterval;
        updateAdvancedClient.PARExpirationTimeInSeconds = Client.PARExpirationTimeInSeconds;
        updateAdvancedClient.MaxRequestParameterLifetimeSeconds = Client.MaxRequestParameterLifetimeSeconds;
        updateAdvancedClient.MaxBindingMessageSize = Client.MaxBindingMessageSize;
        updateAdvancedClient.DpopLifetimeSeconds = Client.DpopLifetimeSeconds;
        updateAdvancedClient.RefreshTokenUsage = Client.RefreshTokenUsage;
        selectedResponseTypes = Client.ResponseTypes.Where(r => !string.IsNullOrWhiteSpace(r));
    }

    void SubmitUpdateClient(UpdateAdvancedClient client)
    {
        dispatcher.Dispatch(new UpdateAdvancedClientSettingsAction
        {
            Id = Client.Id,
            AuthorizationDataTypes = client.AuthorizationDataTypes,
            AuthorizationSignedResponseAlg = client.AuthorizationSignedResponseAlg,
            TokenSignedResponseAlg = client.TokenSignedResponseAlg,
            IdTokenSignedResponseAlg = client.IdTokenSignedResponseAlg,
            ResponseTypes = selectedResponseTypes,
            ClientId = Client.ClientId,
            DPOPNonceLifetimeInSeconds = client.DPOPNonceLifetimeInSeconds,
            IsDPoPNonceRequired = client.IsDPoPNonceRequired,
            IsDPoPRequired = client.IsDPoPRequired,
            TokenExpirationTimeInSeconds = client.TokenExpirationTimeInSeconds,
            RefreshTokenExpirationTimeInSeconds = client.RefreshTokenExpirationTimeInSeconds,
            UserCookieExpirationTimeInSeconds = client.UserCookieExpirationTimeInSeconds,
            AuthorizationCodeExpirationInSeconds = client.AuthorizationCodeExpirationInSeconds,
            DeviceCodeExpirationInSeconds = client.DeviceCodeExpirationInSeconds,
            DeviceCodePollingInterval = client.DeviceCodePollingInterval,
            PARExpirationTimeInSeconds = client.PARExpirationTimeInSeconds,
            MaxRequestParameterLifetimeSeconds = client.MaxRequestParameterLifetimeSeconds,
            MaxBindingMessageSize = client.MaxBindingMessageSize,
            DpopLifetimeSeconds = client.DpopLifetimeSeconds,
            RefreshTokenUsage = client.RefreshTokenUsage
        });
    }

    void ShowTooltip(ElementReference eltRef, string msg)
    {
        tooltipService.Open(eltRef, msg, null);
    }
}