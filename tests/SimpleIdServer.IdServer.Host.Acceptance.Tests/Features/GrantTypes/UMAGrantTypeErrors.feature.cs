// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features.GrantTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UMAGrantTypeErrorsFeature : object, Xunit.IClassFixture<UMAGrantTypeErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UMAGrantTypeErrors.feature"
#line hidden
        
        public UMAGrantTypeErrorsFeature(UMAGrantTypeErrorsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/GrantTypes", "UMAGrantTypeErrors", "\tCheck errors returned when using \'urn:ietf:params:oauth:grant-type:uma-ticket\' g" +
                    "rant-type\t", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="ticket parameter is required")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "ticket parameter is required")]
        public void TicketParameterIsRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ticket parameter is required", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table379.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
#line 5
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table379, "When ");
#line hidden
#line 9
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("JSON \'$.error_description\'=\'missing parameter ticket\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="claim_token_format parameter is required when claim_token is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "claim_token_format parameter is required when claim_token is passed")]
        public void Claim_Token_FormatParameterIsRequiredWhenClaim_TokenIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("claim_token_format parameter is required when claim_token is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table380.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table380.AddRow(new string[] {
                            "ticket",
                            "ticket"});
                table380.AddRow(new string[] {
                            "claim_token",
                            "token"});
#line 16
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table380, "When ");
#line hidden
#line 22
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("JSON \'$.error_description\'=\'missing parameter claim_token_format\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="claim_token parameter is required when claim_token_format is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "claim_token parameter is required when claim_token_format is passed")]
        public void Claim_TokenParameterIsRequiredWhenClaim_Token_FormatIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("claim_token parameter is required when claim_token_format is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table381.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table381.AddRow(new string[] {
                            "ticket",
                            "ticket"});
                table381.AddRow(new string[] {
                            "claim_token_format",
                            "format"});
#line 29
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table381, "When ");
#line hidden
#line 35
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("JSON \'$.error_description\'=\'missing parameter claim_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="ticket must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "ticket must be valid")]
        public void TicketMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ticket must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table382 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table382.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table382.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table382.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table382.AddRow(new string[] {
                            "ticket",
                            "ticket"});
                table382.AddRow(new string[] {
                            "claim_token",
                            "token"});
                table382.AddRow(new string[] {
                            "claim_token_format",
                            "format"});
#line 42
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table382, "When ");
#line hidden
#line 51
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And("JSON \'$.error\'=\'invalid_grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("JSON \'$.error_description\'=\'permission ticket is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="client_token_format must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "client_token_format must be valid")]
        public void Client_Token_FormatMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("client_token_format must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table383 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table383.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table383.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table383.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table383.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 58
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table383, "When ");
#line hidden
#line 65
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table384.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table384.AddRow(new string[] {
                            "subject",
                            "user1"});
                table384.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table384.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table384.AddRow(new string[] {
                            "name#en",
                            "name"});
                table384.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table384.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table384.AddRow(new string[] {
                            "type",
                            "type"});
                table384.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 68
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table384, "And ");
#line hidden
#line 80
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table385.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table385.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table385.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 83
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table385, "And ");
#line hidden
#line 89
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table386.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table386.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table386.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table386.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table386.AddRow(new string[] {
                            "claim_token",
                            "token"});
                table386.AddRow(new string[] {
                            "claim_token_format",
                            "format"});
#line 92
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table386, "And ");
#line hidden
#line 101
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And("JSON \'$.error_description\'=\'token format format is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="claim_token must be a valid JWT")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "claim_token must be a valid JWT")]
        public void Claim_TokenMustBeAValidJWT()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("claim_token must be a valid JWT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table387.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table387.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table387.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table387.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 108
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table387, "When ");
#line hidden
#line 115
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table388.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table388.AddRow(new string[] {
                            "subject",
                            "user1"});
                table388.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table388.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table388.AddRow(new string[] {
                            "name#en",
                            "name"});
                table388.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table388.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table388.AddRow(new string[] {
                            "type",
                            "type"});
                table388.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 118
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table388, "And ");
#line hidden
#line 130
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table389.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table389.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table389.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 133
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table389, "And ");
#line hidden
#line 139
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table390.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table390.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table390.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table390.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table390.AddRow(new string[] {
                            "claim_token",
                            "token"});
                table390.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
#line 142
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table390, "And ");
#line hidden
#line 151
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.And("JSON \'$.error_description\'=\'JSON Web Token cannot be read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="scope must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "scope must be supported")]
        public void ScopeMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scope must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table391.AddRow(new string[] {
                            "sub",
                            "random"});
                table391.AddRow(new string[] {
                            "iss",
                            "http://localhost"});
#line 158
 testRunner.Given("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table391, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table392.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table392.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table392.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table392.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 163
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table392, "When ");
#line hidden
#line 170
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table393.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table393.AddRow(new string[] {
                            "subject",
                            "user1"});
                table393.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table393.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table393.AddRow(new string[] {
                            "name#en",
                            "name"});
                table393.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table393.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table393.AddRow(new string[] {
                            "type",
                            "type"});
                table393.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 173
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table393, "And ");
#line hidden
#line 185
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table394.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table394.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table394.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 188
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table394, "And ");
#line hidden
#line 194
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table395.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table395.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table395.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table395.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table395.AddRow(new string[] {
                            "claim_token",
                            "$id_token_hint$"});
                table395.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table395.AddRow(new string[] {
                            "scope",
                            "invalid"});
#line 197
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table395, "And ");
#line hidden
#line 207
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.And("JSON \'$.error\'=\'invalid_scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
 testRunner.And("JSON \'$.error_description\'=\'At least one of the scopes included in the request do" +
                        "es not match an available scope for any of the resources associated with request" +
                        "ed permissions for the permission ticket provided by the client.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="claim_token must contains the claims")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "claim_token must contains the claims")]
        public void Claim_TokenMustContainsTheClaims()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("claim_token must contains the claims", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table396.AddRow(new string[] {
                            "sub",
                            "user"});
                table396.AddRow(new string[] {
                            "iss",
                            "http://localhost"});
#line 214
 testRunner.Given("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table396, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table397.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table397.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table397.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table397.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 219
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table397, "When ");
#line hidden
#line 226
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table398.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table398.AddRow(new string[] {
                            "subject",
                            "user1"});
                table398.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table398.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table398.AddRow(new string[] {
                            "name#en",
                            "name"});
                table398.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table398.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table398.AddRow(new string[] {
                            "type",
                            "type"});
                table398.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 229
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table398, "And ");
#line hidden
#line 241
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table399.AddRow(new string[] {
                            "permissions",
                            "[ { \"claims\": [ { \"name\": \"sub\", \"value\": \"user\" }, { \"name\": \"email\", \"value\": \"" +
                                "user@hotmail.com\" } ], \"scopes\": [ \"scope1\" ] } ]"});
                table399.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 244
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table399, "And ");
#line hidden
                TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table400.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table400.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table400.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 249
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table400, "And ");
#line hidden
#line 255
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 256
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table401.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table401.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table401.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table401.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table401.AddRow(new string[] {
                            "claim_token",
                            "$id_token_hint$"});
                table401.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table401.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 258
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table401, "And ");
#line hidden
#line 268
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
 testRunner.And("JSON \'$.need_info.required_claims[0].claim_token_format\'=\'http://openid.net/specs" +
                        "/openid-connect-core-1_0.html#IDToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.And("JSON \'$.need_info.required_claims[0].name\'=\'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User must be authorized")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "User must be authorized")]
        public void UserMustBeAuthorized()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User must be authorized", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table402.AddRow(new string[] {
                            "sub",
                            "user1"});
                table402.AddRow(new string[] {
                            "email",
                            "user@hotmail.fr"});
                table402.AddRow(new string[] {
                            "iss",
                            "http://localhost"});
#line 275
 testRunner.Given("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table402, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table403.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table403.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table403.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table403.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 281
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table403, "When ");
#line hidden
#line 288
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table404.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table404.AddRow(new string[] {
                            "subject",
                            "user1"});
                table404.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table404.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table404.AddRow(new string[] {
                            "name#en",
                            "name"});
                table404.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table404.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table404.AddRow(new string[] {
                            "type",
                            "type"});
                table404.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 291
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table404, "And ");
#line hidden
#line 303
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 304
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table405.AddRow(new string[] {
                            "permissions",
                            "[ { \"claims\": [ { \"name\": \"sub\", \"value\": \"user\" }, { \"name\": \"email\", \"value\": \"" +
                                "user@hotmail.com\" } ], \"scopes\": [ \"scope1\" ] } ]"});
                table405.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 306
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table405, "And ");
#line hidden
                TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table406.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table406.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\"]"});
                table406.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 311
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table406, "And ");
#line hidden
#line 317
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 318
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table407.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table407.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table407.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table407.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table407.AddRow(new string[] {
                            "claim_token",
                            "$id_token_hint$"});
                table407.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table407.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 320
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table407, "And ");
#line hidden
#line 330
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 332
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 333
 testRunner.And("JSON \'$.request_submitted.ticket\'=\'$ticket$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 334
 testRunner.And("JSON \'$.request_submitted.interval\'=\'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UMAGrantTypeErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UMAGrantTypeErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
