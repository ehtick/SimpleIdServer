// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BCAuthorizeErrorsFeature : object, Xunit.IClassFixture<BCAuthorizeErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BCAuthorizeErrors.feature"
#line hidden
        
        public BCAuthorizeErrorsFeature(BCAuthorizeErrorsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BCAuthorizeErrors", "\tCheck errors returned by the /mtls/bc-authorize endpoint", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="at least one token hint must be passed")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "at least one token hint must be passed")]
        public void AtLeastOneTokenHintMustBePassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("at least one token hint must be passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table50.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table50.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
#line 7
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table50, "When ");
#line hidden
#line 12
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("JSON \'error_description\'=\'only one hint can be passed in the request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must contains audience (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must contains audience (request)")]
        public void RequestParameterMustContainsAudienceRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must contains audience (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table51.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
#line 19
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table51, "And ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table52.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table52.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table52.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 23
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table52, "When ");
#line hidden
#line 29
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
 testRunner.And("JSON \'error_description\'=\'the request doesn\'t contain audience\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must contains valid audience (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must contains valid audience (request)")]
        public void RequestParameterMustContainsValidAudienceRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must contains valid audience (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table53.AddRow(new string[] {
                            "aud",
                            "invalid"});
#line 36
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table53, "And ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table54.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table54.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table54.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 40
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table54, "When ");
#line hidden
#line 46
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.And("JSON \'error_description\'=\'the request doesn\'t contain correct audience\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must contains issuer (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must contains issuer (request)")]
        public void RequestParameterMustContainsIssuerRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must contains issuer (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table55.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
#line 53
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table55, "And ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table56.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table56.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table56.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 57
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table56, "When ");
#line hidden
#line 63
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.And("JSON \'error_description\'=\'the request doesn\'t contain issuer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must contains valid issuer (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must contains valid issuer (request)")]
        public void RequestParameterMustContainsValidIssuerRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must contains valid issuer (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table57.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table57.AddRow(new string[] {
                            "iss",
                            "invalid"});
#line 70
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table57, "And ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table58.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table58.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table58.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 75
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table58, "When ");
#line hidden
#line 81
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.And("JSON \'error_description\'=\'the request doesn\'t contain correct issuer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must not be expired (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must not be expired (request)")]
        public void RequestParameterMustNotBeExpiredRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must not be expired (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table59.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table59.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table59.AddRow(new string[] {
                            "exp",
                            "1587492240"});
#line 88
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table59, "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table60.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table60.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table60.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 94
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table60, "When ");
#line hidden
#line 100
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="lifetime of the request must not exceed 6000 seconds (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "lifetime of the request must not exceed 6000 seconds (request)")]
        public void LifetimeOfTheRequestMustNotExceed6000SecondsRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("lifetime of the request must not exceed 6000 seconds (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 105
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table61.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table61.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table61.AddRow(new string[] {
                            "nbf",
                            "1587492240"});
                table61.AddRow(new string[] {
                            "exp",
                            "7267687440"});
#line 106
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table61, "And ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table62.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table62.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table62.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 113
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table62, "When ");
#line hidden
#line 119
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
 testRunner.And("JSON \'error_description\'=\'the maximum lifetime of the request is \'6000\' seconds\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must contains jti (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must contains jti (request)")]
        public void RequestParameterMustContainsJtiRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must contains jti (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table63.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table63.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table63.AddRow(new string[] {
                            "exp",
                            "$exp$"});
#line 127
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table63, "And ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table64.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table64.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table64.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 133
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table64, "When ");
#line hidden
#line 139
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.And("JSON \'error_description\'=\'the request doesn\'t contain jti\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="at least one token hint must be passed (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "at least one token hint must be passed (request)")]
        public void AtLeastOneTokenHintMustBePassedRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("at least one token hint must be passed (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table65.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table65.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table65.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table65.AddRow(new string[] {
                            "jti",
                            "jti"});
#line 147
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table65, "And ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table66.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table66.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table66.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 154
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table66, "When ");
#line hidden
#line 160
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
 testRunner.And("JSON \'error_description\'=\'only one hint can be passed in the request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="user_code is required when backchannel_user_code_parameter is true (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "user_code is required when backchannel_user_code_parameter is true (request)")]
        public void User_CodeIsRequiredWhenBackchannel_User_Code_ParameterIsTrueRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("user_code is required when backchannel_user_code_parameter is true (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 166
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table67.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table67.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table67.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table67.AddRow(new string[] {
                            "jti",
                            "jti"});
                table67.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
#line 168
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table67, "And ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table68.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table68.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table68.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 176
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table68, "When ");
#line hidden
#line 182
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.And("JSON \'error_description\'=\'the parameter user_code is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="scope or authorization_details parameter is required (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "scope or authorization_details parameter is required (request)")]
        public void ScopeOrAuthorization_DetailsParameterIsRequiredRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scope or authorization_details parameter is required (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 188
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 189
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table69.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table69.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table69.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table69.AddRow(new string[] {
                            "jti",
                            "jti"});
                table69.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table69.AddRow(new string[] {
                            "user_code",
                            "code"});
#line 190
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table69, "And ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table70.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table70.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table70.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 199
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table70, "When ");
#line hidden
#line 205
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
 testRunner.And("JSON \'error_description\'=\'missing parameters scope,authorization_details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="authorization_details type is required (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "authorization_details type is required (request)")]
        public void Authorization_DetailsTypeIsRequiredRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("authorization_details type is required (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 210
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 211
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 212
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table71.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table71.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table71.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table71.AddRow(new string[] {
                            "jti",
                            "jti"});
                table71.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table71.AddRow(new string[] {
                            "user_code",
                            "code"});
                table71.AddRow(new string[] {
                            "authorization_details",
                            "{ \"locations\": [] }"});
#line 213
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table71, "And ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table72.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table72.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table72.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 223
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table72, "When ");
#line hidden
#line 229
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 231
 testRunner.Then("JSON \'error\'=\'invalid_authorization_details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
 testRunner.And("JSON \'error_description\'=\'the authorization_details type is required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="authorization_details type must be valid (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "authorization_details type must be valid (request)")]
        public void Authorization_DetailsTypeMustBeValidRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("authorization_details type must be valid (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 235
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 236
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table73.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table73.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table73.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table73.AddRow(new string[] {
                            "jti",
                            "jti"});
                table73.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table73.AddRow(new string[] {
                            "user_code",
                            "code"});
                table73.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\": \"invalid\" }"});
#line 237
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table73, "And ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table74.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table74.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table74.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 247
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table74, "When ");
#line hidden
#line 253
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 255
 testRunner.Then("JSON \'error\'=\'invalid_authorization_details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
 testRunner.And("JSON \'error_description\'=\'authorization details types invalid are not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="scope must be valid (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "scope must be valid (request)")]
        public void ScopeMustBeValidRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scope must be valid (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 258
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 259
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 260
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table75.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table75.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table75.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table75.AddRow(new string[] {
                            "jti",
                            "jti"});
                table75.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table75.AddRow(new string[] {
                            "scope",
                            "invalid"});
                table75.AddRow(new string[] {
                            "user_code",
                            "code"});
#line 261
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table75, "And ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table76.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table76.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table76.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 271
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table76, "When ");
#line hidden
#line 277
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 279
 testRunner.Then("JSON \'error\'=\'invalid_scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
 testRunner.And("JSON \'error_description\'=\'unauthorized to scopes : invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="client_notification_token parameter is required (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "client_notification_token parameter is required (request)")]
        public void Client_Notification_TokenParameterIsRequiredRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("client_notification_token parameter is required (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 283
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 284
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table77.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table77.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table77.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table77.AddRow(new string[] {
                            "jti",
                            "jti"});
                table77.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table77.AddRow(new string[] {
                            "scope",
                            "secondScope"});
                table77.AddRow(new string[] {
                            "user_code",
                            "code"});
#line 285
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table77, "And ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table78.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table78.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table78.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 295
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table78, "When ");
#line hidden
#line 301
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 303
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 304
 testRunner.And("JSON \'error_description\'=\'missing parameter client_notification_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="client_notification_token size must be greater than 128 bits (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "client_notification_token size must be greater than 128 bits (request)")]
        public void Client_Notification_TokenSizeMustBeGreaterThan128BitsRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("client_notification_token size must be greater than 128 bits (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 306
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 307
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 308
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table79.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table79.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table79.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table79.AddRow(new string[] {
                            "jti",
                            "jti"});
                table79.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table79.AddRow(new string[] {
                            "scope",
                            "secondScope"});
                table79.AddRow(new string[] {
                            "client_notification_token",
                            "1"});
                table79.AddRow(new string[] {
                            "user_code",
                            "code"});
#line 309
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table79, "And ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table80.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table80.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table80.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 320
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table80, "When ");
#line hidden
#line 326
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 328
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 329
 testRunner.And("JSON \'error_description\'=\'client_notification_token must contains at least 128 by" +
                        "tes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="id_token_hint must be valid (request)")]
        [Xunit.TraitAttribute("FeatureTitle", "BCAuthorizeErrors")]
        [Xunit.TraitAttribute("Description", "id_token_hint must be valid (request)")]
        public void Id_Token_HintMustBeValidRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("id_token_hint must be valid (request)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 331
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 332
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 333
 testRunner.And("build expiration time and add \'5000\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table81.AddRow(new string[] {
                            "aud",
                            "https://localhost:8080"});
                table81.AddRow(new string[] {
                            "iss",
                            "fortyTwoClient"});
                table81.AddRow(new string[] {
                            "exp",
                            "$exp$"});
                table81.AddRow(new string[] {
                            "jti",
                            "jti"});
                table81.AddRow(new string[] {
                            "id_token_hint",
                            "idtokenhint"});
                table81.AddRow(new string[] {
                            "scope",
                            "secondScope"});
                table81.AddRow(new string[] {
                            "client_notification_token",
                            "04bcf708-dfba-4719-a3d3-b213322e2c38"});
                table81.AddRow(new string[] {
                            "user_code",
                            "code"});
#line 334
 testRunner.And("build JWS request object for client \'fortyTwoClient\' and sign with the key \'keyId" +
                        "\'", ((string)(null)), table81, "And ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table82.AddRow(new string[] {
                            "X-Testing-ClientCert",
                            "sidClient.crt"});
                table82.AddRow(new string[] {
                            "client_id",
                            "fortyTwoClient"});
                table82.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 345
 testRunner.When("execute HTTP POST request \'https://localhost:8080/mtls/bc-authorize\'", ((string)(null)), table82, "When ");
#line hidden
#line 351
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 353
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 354
 testRunner.And("JSON \'error_description\'=\'JSON Web Token cannot be read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BCAuthorizeErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BCAuthorizeErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
